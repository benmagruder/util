The classes in this directory implement statistical accumulators that are useful
for data analysis.

  Average<Data>                  - Computes block and global averages, 
                                   variance, and error for a sequence of
                                   Data values. Uses a hierarchical 
                                   blocking algorithm to estimate errors.

  TensorAverage<Data>            - Computes averages and errors for components
                                   of a tensor value variable. Implemented as
                                   a container for Average<Data> objects, one
                                   per component.

  SymmTensorAverage<Data>        - Computes averages and errors for components
                                   of a symmetric tensor variable, using only 
                                   components T(i, j) with j <= i. 
         
  AutoCorrelation<Data, Product> - Computes an autocorrelation function for 
                                   a single sequence of Data values. Uses a
                                   hierarchical blocking algorithm to allow
                                   a large range of delay times.

  AutoCorr<Data, Product>        - Computes an autocorrelation function for 
                                   a single sequence of Data values. Uses a
                                   simple non-hierarchical algorithm.

  AutoCorrArray<Data, Product>   - Computes an autocorrelation function for 
                                   an ensemble of equivalent sequences of 
                                   Data values. 

  MeanSqDispArray<Data>          - Computes mean-square displacement for an 
                                   ensemble of equivalent sequences of Data 
                                   values.

  Distribution                   - accumulates a histogram of values for a 
                                   double precision variable.

  IntDistribution                - accumulates a histogram for an integer 
                                   variable.

  RadialDistribution             - accumulates a histogram of particle
                                   separations in a material.

In class templates AutoCorrelation, AutoCorr, and AutoCorrArray the Data
template parameter may be a floating point type (float or double), a complex 
type (std::complex<float> or std::complex<double>), a Vector, or a Tensor. 
The meaning of the product is defined by the product() function template, 
as discussed below.

In the templates AutoCorr, AutoCorrelation and AutoCorrArray, the Product 
parameter is the type for an inner product of two Data values. We require that 
Product be float, double, std::complex<float>, std::complex<double> or double 
when Data is float, double, std::complex<float>, std::complex<double>, Vector, 
or Tensor, respectively.  The inner product a*b is defined as a simple 
multiplication for real Data values, as conjg(a)*b for complex data, as a 
Euclidean inner product (dot product) for Vector data, and as a summation of 
9 products of corresponding elements for Tensor data (i.e., as a sum over i 
and j of a_{ij}b_{ij}). These definitions are implemented by a set of 
overloaded functions named "product()", as defined in the file product.h.

In the class template MeanSqDispArray, the Data parameter may be floating 
point (real or double), complex (std::complex<real> or std::complex<double>) 
or Vector.  In the implementation of MeanSqDispArray, the square difference 
of two Data values is a double precision number that is defined for floating 
point, complex, and Vector Data types by the explicit specializations of the 
sqDiff() method.

See also: Util Accumulators module in the doxygen documentation.
